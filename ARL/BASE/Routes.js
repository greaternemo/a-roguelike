const BaseRoutes = {
    Action: [
        'handleCurrentTurn',
        'endCurrentTurn',
        'makeMobPassTheTurn',
        'moveMobNorth',
        'moveMobEast',
        'moveMobSouth',
        'moveMobWest',
        'movePlayerNorth',
        'movePlayerEast',
        'movePlayerSouth',
        'movePlayerWest',
        'useStairs',
        'pursueThePlayer',
        'wanderInRandomDir',
        'tryToMoveMobInDir',
        'moveMobToLoc',
        'prepRangedAttackTowardTarget',
        'doARangedAttack',
        'doARangedAttackTowardCursor',
        'doARangedAttackTowardTarget',
        'doAHit',
        'changeMobHPCur',
        'changeMobState',
        'changeMobStats',
        'stepIntoAbyss',
        'wasMobKilled',
        'killMob',
    ],
    Agent: [
        'compelMob',
        'compelPlayer',
        'compelGobbo',
        'compelShooto',
        'compelPuncho',
        'canSeeThePlayer',
        'isInlineWithPlayer',
    ],
    Fov: [
        // filler line
        'buildRings',
        'buildDiagonals',
        'addArcToRange',
        'checkRangeForArc',
        'updateMobFovOnCurrentFloor',
    ],
    Game: [
        // filler line
        'doTheGame',
        'doNextTurn',
    ],
    Input: [
        // filler line
        'startListeningForInput',
        'stopListeningForInput',
        'startNewInputContext',
        'endCurrentInputContext',
        'parseRawKeydown',
        'queueInput',
        'handleInput',
        'pressButton',
        'numpad1',
        'numpad2',
        'numpad3',
        'numpad4',
        'numpad5',
        'numpad6',
        'numpad7',
        'numpad8',
        'numpad9',
        'keyarrowup',
        'keyarrowright',
        'keyarrowdown',
        'keyarrowleft',
        'keyspace',
        'keyescape',
        'keyf',
    ],
    Mapgen: [
        // filler line
        'getNodeSides',
        'compareNodeSides',
        'isNodeLayoutSideOpen',
        'getOpenEndSide',
        'getValidNodeSides',
        'getValidNodeLayouts',
        'getMapgenLayout',
        'generateRandomNodeLayout',
        'convertNodeLayoutToSingleArray',
        'finalizeVariableLayout',
        'remapNodeLayoutToNodeMap',
        'expandLayoutMapNodes',
        'mapLayoutMapToFinishedLayout',
        'mapFinishedLayoutToFloor',
        'generateFloorLayout',
    ],
    Narrator: [
        'narrate',
        'colorrate',
        'clearMsgPanel',
        'lineBreak',
        'addLine',
        'addColorLine',
        'narrateAction',
    ],
    Registry: [
        'getEid',
        'setEid',
        'getConst',
        'setConst',
        'importConstants',
        'registerEntity',
        'generateUeid',
        'chaseDown',
        'destroyEntity',
    ],
    Turner: [
        'whoseTurnIsIt',
    ],
    Util: [
        'rand',
        'aDie',
        'aCoin',
        'd2',
        'd4',
        'd6',
        'd8',
        'd10',
        'd12',
        'd20',
        'genNum',
        'randomName',
        'randomNolan',
        'shuffle',
        'randFromArray',
        'cap',
        'byId',
        'scrollToNew',
        'enpair',
        'depair',
        'entrio',
        'detrio',
        'generateLocs',
        'getPlusForLoc',
        'getCrossForLoc',
        'getSquareForLoc',
        'getInlineLocsInDir',
        'getDirBetweenTwoLocs',
        'fracSum',
        'fracDiff',
        'fracGreaterOf',
        'fracLesserOf',
        'fracEqualTo',
        'fracGreaterThan',
        'fracLesserThan',
        'fracGreaterOrEqual',
        'fracLesserOrEqual',
        'intGreaterOf',
        'intLesserOf',
    ],
    View: [
        'drawPhysMap',
        'handleCellUpdates',
        'drawTileToMap',
        'addToDirtyLoad',
        'pushDirtyLoad',
        'addCursorAtLoc',
        'delCursorAtLoc',
        'tryToMoveCursorInDir',
        'moveCursorToLoc',
        'addTargetingAtLoc',
        'delTargetingAtLoc',
        'clearTargetedLocs',
    ],
    World: [
        // filler line
        'generateBasicTile',
        'generateGridAndNodeLocs',
        'buildFloorData',
        'buildBasicFloorMap',
        'buildGreatHallFloorMap',
        'buildGobboctagonFloorMap',
        'generateFloor',
        'populateFirstFloor',
        'populateFloor',
        'findAWalkableTile',
        'findRandomWalkableAndSafeSide',
        'findRandomWalkableSide',
        'findWalkableAndSafeSides',
        'findWalkableSides',
        'isSideWalkableAndSafe',
        'isSideWalkable',
        'generatePlayer',
        'generateMobs',
        'generateMob',
        'mobDeath',
        'handleTileUpdates',
        'updateCurrentGlyph',
        'checkTileVisibility',
        'activateDeathCam',
    ],
};

ARL.BASE.Routes = BaseRoutes;

/*
 *
 *
 * Courtesy Spaces
 *
 *
 */